package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.80

import (
	"context"
	"filevault/graph/model"
	"fmt"

	"golang.org/x/crypto/bcrypt"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, name string, email string, password string) (*model.User, error) {
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)
	if err != nil {
		return nil, err
	}

	var id int
	err = r.DB.Conn.QueryRow(ctx,
		"INSERT INTO users (name, email, password) VALUES ($1, $2, $3) RETURNING id",
		name, email, string(hashedPassword),
	).Scan(&id)
	if err != nil {
		return nil, err
	}

	return &model.User{
		ID:       fmt.Sprintf("%d", id),
		Name:     &name,
		Email:    email,
		Password: string(hashedPassword),
	}, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	cmdTag, err := r.DB.Conn.Exec(ctx, "DELETE FROM users WHERE id=$1", id)
	if err != nil {
		return false, err
	}
	if cmdTag.RowsAffected() == 0 {
		return false, fmt.Errorf("no user found with id %s", id)
	}
	return true, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, email string, password string) (*model.AuthPayload, error) {
	var u model.User
	err := r.DB.Conn.QueryRow(ctx, "SELECT id, name, email, password FROM users WHERE email=$1", email).
		Scan(&u.ID, &u.Name, &u.Email, &u.Password)
	if err != nil {
		return nil, fmt.Errorf("no user found with email %s", email)
	}

	if err := bcrypt.CompareHashAndPassword([]byte(u.Password), []byte(password)); err != nil {
		return nil, fmt.Errorf("invalid password")
	}

	token, err := generateJWT(u.ID)
	if err != nil {
		return nil, err
	}

	u.Password = ""

	return &model.AuthPayload{
		User:  &u,
		Token: token,
	}, nil
}

func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	userID, authenticated := GetUserIDFromCtx(ctx)
	if !authenticated {
		return nil, fmt.Errorf("authentication required")
	}

	fmt.Printf("Authenticated user %s is requesting users list\n", userID)

	rows, err := r.DB.Conn.Query(ctx, "SELECT id, name, email FROM users")
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var users []*model.User
	for rows.Next() {
		var u model.User
		if err := rows.Scan(&u.ID, &u.Name, &u.Email); err != nil {
			return nil, err
		}
		users = append(users, &u)
	}
	return users, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	var u model.User
	err := r.DB.Conn.QueryRow(ctx, "SELECT id, name, email FROM users WHERE id=$1", id).
		Scan(&u.ID, &u.Name, &u.Email)
	if err != nil {
		return nil, err
	}
	return &u, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
